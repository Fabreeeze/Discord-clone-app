generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.String
  // https://prnt.sc/JqxVQJU7_uL8 , for cockroachdb, db.Text is not supported for prisma, so we use db.String

  //  here clearly can see ,for cockroachdb, text and string are both mapped to db.String
  // https://prnt.sc/pJP3v5mDWRSa
  email String @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  servers Server[]
  members Member[]
  channels Channel[]
}


model Server{
  id String @id @default(uuid())
  name String
  imageUrl String @db.String
  inviteCode String @db.String

  profileId String
  profile Profile @relation( fields:[profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]
  channels Channel[]

  @@index([profileId])
  //this is for manual indexing, to act as foreign key etc etc.
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST

}

model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id],onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId] , references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO

}

model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String 
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)


  @@index([profileId])
  @@index([serverId])

}




// every time we modify ou prisma schema , we have to write the following 2 commands on terminal
// npx prisma generate (this generate the schema in node modules etc)
// npx prisma db push  (this creates the corresponding schemas/models on the db server )